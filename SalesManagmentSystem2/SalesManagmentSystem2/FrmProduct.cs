using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using SalesManagmentSystem2.DAL.DbInventory;
using SalesManagmentSystem2.DAL.Models;
using SalesManagmentSystem2.PL;

using DevExpress.XtraGrid.Views.Grid;

namespace SalesManagmentSystem2
{
    public partial class FrmProduct : Form
    {
        GridView grid;
        InventoryDB db = new InventoryDB();
        bool flag = false;
        private Product selectedProduct = null;
        MessageDialog messageDialog = new MessageDialog();
        public FrmProduct()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            SalesManagmentSystem2.DAL.DbInventory.InventoryDB dbContext = new SalesManagmentSystem2.DAL.DbInventory.InventoryDB();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.Products.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                productsBindingSource.DataSource = dbContext.Products.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());


            //grid.FocusedRowChanged += (sender, e) => selectedProduct = ((Product)grid.GetFocusedRow());

        }

        private void pnlProduct_Paint(object sender, PaintEventArgs e)
        {

        }

        private void gridCategory_Click(object sender, EventArgs e)
        {

        }

        //btnAdd
        private void simpleButton1_Click(object sender, EventArgs e)
        {
            if (!flag)
            {

                Product product = new Product();
                product.ProductName = txtproname.Text;
                product.ProductPrice = Convert.ToDecimal(txtproPrics.Text);
                //product.categoryId = comoCategory.Text.ToString();
                product.Quantity = Convert.ToInt32(txtQty.Text);
                if (txtproname.Text == "" || txtproPrics.Text == "" || txtQty.Text == "")
                {
                    MessageBox.Show("ن فضلك ادخل البيانات كاملة");
                }
                db.Products.Add(product);
                db.SaveChanges();
            }
            MessageBox.Show("تم اضافة الصنف بنجاح");

            db.Products.Load();
            reset();
            gridproduct.DataSource = db.Products.Local.ToBindingList();
        }


        //btnEdit
        private void simpleButton2_Click(object sender, EventArgs e)
        {
            int iid = Convert.ToInt32(gridView1.GetFocusedRowCellValue("ProductID"));
            Product product = new Product();

            if (!flag)
            {
                product = db.Products.Where(x => x.ProductID == iid).FirstOrDefault();
                txtproname.Text = product.ProductName;
                txtproPrics.Text = product.ProductPrice.ToString();
                //product.categoryId = comoCategory.Text.ToString();
                txtQty.Text = product.Quantity.ToString();
                btnEdit.Text = "حغظ التعديل";
                flag = true;


            }
            else if(flag)
            {
                messageDialog.Message = "هل انت متأكد من تعديل هذا المنتج!";

                if (messageDialog.ShowDialog() == DialogResult.Yes)
                {
                    product.ProductName = txtproname.Text;
                    product.ProductPrice = Convert.ToDecimal(txtproPrics.Text);
                    //product.categoryId = comoCategory.Text.ToString();
                    product.Quantity = Convert.ToInt32(txtQty.Text);
                    db.Entry(product).State = EntityState.Modified;
                    db.SaveChanges();
                }
                reset();
                btnEdit.Text = "تعديل";
            }


           



        }


        private void btnDelete_Click(object sender, EventArgs e)
        {
            messageDialog.Message = "هل انت متاكد ان تريد مسح هذا العميل";
            if (selectedProduct != null)
            {
                if (messageDialog.ShowDialog() == DialogResult.Yes)
                {
                    db.Entry(selectedProduct).State = EntityState.Deleted;
                    db.SaveChanges();
                }
                reset();
            }
        }

        //reset Values
        private void reset()
        {
            txtproname.Text = "";
            txtproPrics.Text = "";
            txtQty.Text = "";
            flag = false;
        }

        private void FilltxtOnSelectesData(Product product)
        {
            txtproname.Text = product.ProductName;
            txtproPrics.Text = product.ProductPrice.ToString();
            txtQty.Text = product.Quantity.ToString();

        }
    }
}
