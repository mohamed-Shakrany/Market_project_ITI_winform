using DevExpress.Data.ODataLinq.Helpers;
using SalesManagmentSystem2.DAL.DbInventory;
using SalesManagmentSystem2.DAL.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using SalesManagmentSystem2.PL;
using System.Data.Entity.Core;
using System.Data.Entity.Core.Objects;
using System.Diagnostics;

namespace SalesManagmentSystem2
{
    public partial class FrmPurchase : Form
    {


        InventoryDB db = new InventoryDB();
        BuyProcessProduct buypro_product = new BuyProcessProduct();
        BuyProcess bp = new BuyProcess();
        MessageDialog messageDialog = new MessageDialog();
        Product pro = new Product();
        Supplier supplier = new Supplier();


        public FrmPurchase()

        {
            InitializeComponent();



            category_choose.DataSource = db.Categories.ToList();
            category_choose.ValueMember = "CatID";
            category_choose.DisplayMember = "CatName";

            comboBox1.DataSource = db.Products.ToList();
            comboBox1.ValueMember = "ProductID";
            comboBox1.DisplayMember = "ProductName";

            show_supp_name.DataSource = db.Suppliers.ToList();
            show_supp_name.ValueMember = "ID";
            show_supp_name.DisplayMember = "SuppName";


            show_supplier_data.DataSource = db.BuyProcesses.ToList();
            gridControl_buy_process_pro.DataSource = db.BuyProcessProducts.ToList();




            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            SalesManagmentSystem2.DAL.DbInventory.InventoryDB dbContext = new SalesManagmentSystem2.DAL.DbInventory.InventoryDB();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.BuyProcesses.LoadAsync().ContinueWith(loadTask =>
            {
    // Bind data to control when loading complete
    buyProcessesBindingSource.DataSource = dbContext.BuyProcesses.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }
        private void simpleButton4_Click(object sender, EventArgs e)
        {


        }

        //private void pnlSalesDetails_Paint(object sender, PaintEventArgs e)
        //{

        //}

        private void btndisplaydetails_Click(object sender, EventArgs e)
        {
            
        }

        private void simpleButton4_Click_1(object sender, EventArgs e)
        {

          
        }






        private void FrmPurchase_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'inventoryMSDbDataSet4.Products' table. You can move, or remove it, as needed.
            this.productsTableAdapter.Fill(this.inventoryMSDbDataSet4.Products);
            // TODO: This line of code loads data into the 'inventoryMSDbDataSet7.BuyProcessProducts' table. You can move, or remove it, as needed.
            this.buyProcessProductsTableAdapter1.Fill(this.inventoryMSDbDataSet7.BuyProcessProducts);
            // TODO: This line of code loads data into the 'inventoryMSDbDataSet6.BuyProcessProducts' table. You can move, or remove it, as needed.
            this.buyProcessProductsTableAdapter.Fill(this.inventoryMSDbDataSet6.BuyProcessProducts);
            // TODO: This line of code loads data into the 'inventoryMSDbDataSet5.Customers' table. You can move, or remove it, as needed.
            //this.customersTableAdapter.Fill(this.inventoryMSDbDataSet5.Customers);



            // TODO: This line of code loads data into the 'inventoryMSDbDataSet4.Products' table. You can move, or remove it, as needed.
            this.productsTableAdapter.Fill(this.inventoryMSDbDataSet4.Products);
            // TODO: This line of code loads data into the 'inventoryMSDbDataSet3.Categories' table. You can move, or remove it, as needed.
            //this.categoriesTableAdapter.Fill(this.inventoryMSDbDataSet3.Categories);
            // TODO: This line of code loads data into the 'inventoryMSDbDataSet2.Suppliers' table. You can move, or remove it, as needed.
            //this.suppliersTableAdapter.Fill(this.inventoryMSDbDataSet2.Suppliers);

        }

        private void gridControl100_Click(object sender, EventArgs e)
        {

        }

        private void dataGridView2_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {


        }

        private void quantity_TextChanged(object sender, EventArgs e)
        {

        }

        private void productNameTextEdit_EditValueChanged(object sender, EventArgs e)
        {

        }
        bool add_qauntity = false;
        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {




            if (!string.IsNullOrEmpty(comboBox1.Text))
            {

                buypro_product.Id_p = ((Product)comboBox1.SelectedItem).ProductID ;


            }
           // var catID = ((Product)comboBox1.SelectedItem).ProductID;
            






        }



                      /* TO VALIDATE DATE OF THE  PURCHASED ORDER */
                      


        private void dateEdit1_EditValueChanged(object sender, EventArgs e)
        {
            bp.DataProcess = op_date.DateTime;
         
        }

       
        private void rep_name_TextChanged(object sender, EventArgs e)
        {

        } 
                     /* TO VALIDATE REPRESENTAITVE NAME  */
        private void rep_name_Leave(object sender, EventArgs e)
        {
            if (!String.IsNullOrEmpty(rep_name.Text))
            {
                bp.FullName = rep_name.Text;
            }

        }

        private void total_Leave(object sender, EventArgs e)
        {


        }
        bool add_quantity_2 = false;


                        /* TO VALIDATE QUANTITY PURCHASED */     
        private void quantity_Leave(object sender, EventArgs e)
        {
            bool check_QUABTITY = false;

            if (String.IsNullOrEmpty(quantity.Text))
            {
                MessageBox.Show("This Field is required");
                quantity.Focus();
                check_QUABTITY = false;

            }


            if (System.Text.RegularExpressions.Regex.IsMatch(quantity.Text, "[^0-9]"))
            {
                check_QUABTITY = false;
                MessageBox.Show("Please enter only numbers.");
                quantity.Text = quantity.Text.Remove(quantity.Text.Length - 1);
                quantity.Focus();

            }


            if (!System.Text.RegularExpressions.Regex.IsMatch(quantity.Text, "[^0-9]") && (!String.IsNullOrEmpty(quantity.Text)))
                check_QUABTITY = true;

            if (check_QUABTITY)
            {
                buypro_product.Total_quantity = int.Parse(quantity.Text);



            }

           
             //   add_quantity_2 = true;

            
        }

        private void inv_no_Leave(object sender, EventArgs e)
        {

        }

        private void pro_date_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void exp_date_EditValueChanged(object sender, EventArgs e)
        {



        }
                       /*       TO VALIDATE PRICE   */
        private void tot_price_Leave(object sender, EventArgs e)
        {


            bool check_price = false;
            if (String.IsNullOrEmpty(tot_price.Text))
            {
                MessageBox.Show("This Field is required");
                tot_price.Focus();
                 check_price = false;

            }

           
            if (System.Text.RegularExpressions.Regex.IsMatch(tot_price.Text, "[^0-9]"))
            {
                check_price = false;
                MessageBox.Show("Please enter only numbers.");
                tot_price.Text = tot_price.Text.Remove(tot_price.Text.Length - 1);
                tot_price.Focus();

            }
            if (!System.Text.RegularExpressions.Regex.IsMatch(tot_price.Text, "[^0-9]") && (!String.IsNullOrEmpty(tot_price.Text)))
                check_price = true;

            if (check_price)
            {
                bp.TotalPrice = decimal.Parse(tot_price.Text);

            }
               

            


        }

                /*  TO VALIDATE NATIONAL ID FOR REPRESNTATIVES   */

        private void national_id_Leave(object sender, EventArgs e)
        {
            bool check_nationl_id = false;
            if (String.IsNullOrEmpty(national_id.Text))
            {
                MessageBox.Show("This Field is required");
                national_id.Focus();
                check_nationl_id = false;

            }


            if (System.Text.RegularExpressions.Regex.IsMatch(national_id.Text, "[^0-9]"))
            {
                MessageBox.Show("Please enter only numbers.");
                national_id.Text = national_id.Text.Remove(national_id.Text.Length - 1);
                national_id.Focus();
                check_nationl_id = false;



            }
            if(national_id.Text.Length < 14 || national_id.Text.Length >14)
            {
                MessageBox.Show("National id MUST equal 14 numbers");
                national_id.Focus();

            }
            if (!System.Text.RegularExpressions.Regex.IsMatch(national_id.Text, "[^0-9]") && (!String.IsNullOrEmpty(national_id.Text)) && national_id.Text.Length ==14)
                check_nationl_id = true;
            if (check_nationl_id)
            {
                bp.NationalID = national_id.Text;
            }


        



    }
        private void op_date_Leave(object sender, EventArgs e)
        {
          
        }

                /* TO VALIDATE EXPIRE DATE   */

        private void exp_date_Leave(object sender, EventArgs e)
        {
            if (String.IsNullOrEmpty(exp_date.Text))
            {
                MessageBox.Show("SHOULD NOT BE EMPTY");
                exp_date.Focus();
            }
            else
                buypro_product.ExpireDate = exp_date.DateTime;

        }
        int x;
        private void comboBox1_SelectionChangeCommitted(object sender, EventArgs e)
        {
            if (comboBox1.IsHandleCreated && comboBox1.Focused)
            {
             
                buypro_product.Id_p = Convert.ToInt32(comboBox1.SelectedIndex.ToString());
                add_qauntity = true;
              
            }

        }
        private void simpleButton1_Click(object sender, EventArgs e)
        {


         


        }

               /*             GET SUPPLIER ID            */
        private void show_supp_name_SelectionChangeCommitted(object sender, EventArgs e)
        {
            if (show_supp_name.IsHandleCreated && show_supp_name.Focused)
            {
             
                bp.SupplierId = Convert.ToInt32(show_supp_name.SelectedIndex.ToString());

            }
        }




                  /*   PRODUCTION DATE VALIDATION */
        private void pro_date_Leave(object sender, EventArgs e)
        {
           
          
            if (String.IsNullOrEmpty(pro_date.Text))
            {
                MessageBox.Show("SHOULD NOT BE EMPTY");
                pro_date.Focus();
            }
            else
                buypro_product.ProductDate = pro_date.DateTime;

        }

        private void op_date_Layout(object sender, LayoutEventArgs e)
        {

        }
        public int _id;

     
        public void Update_data()
        {
            
        }
        int show_data_to;
        private void simpleButton1_Click_1(object sender, EventArgs e)
        {

        }

        private void show_supplier_data_Click(object sender, EventArgs e)
        {

        }
                     /* TO ADD NEW ITEMS */
        private void btnAdd_Click(object sender, EventArgs e)
        {
            try
            {

                if (exp_date.DateTime > pro_date.DateTime)
                {

                     
                   var q = db.Products.Where(p => p.ProductID == buypro_product.Id_p).FirstOrDefault();

                    q.Quantity += buypro_product.Total_quantity;

                    db.BuyProcesses.Add(bp);

                    db.BuyProcessProducts.Add(buypro_product);

                    db.SaveChanges();

                    MessageBox.Show("Items added Succeessfuly");

                    show_supplier_data.RefreshDataSource();

                    gridControl_buy_process_pro.RefreshDataSource();
                }
                else
                {
                    MessageBox.Show("EXPIRE DATE CAN NOT BE BEFORE PRODUCTION DATE");

                    exp_date.Focus();
                }


            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }




        }
        /*                 CODE TO ADD ITEMS          */
        private void simpleButton5_Click(object sender, EventArgs e)
        {
            try
            {

                if (exp_date.DateTime > pro_date.DateTime)
                {

                    db.BuyProcesses.Add(bp);
                    db.BuyProcessProducts.Add(buypro_product);

                    db.SaveChanges();
                    MessageBox.Show("Items added Succeessfuly");


                }
                else
                {
                  
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("not allowed");
                exp_date.Focus();
                MessageBox.Show(ex.Message);
            }

        }










        /*            CODE TO EDIT ORDERS              */
        bool flag = false;

        private void btnEdit_Click(object sender, EventArgs e)
        {
            int iid = Convert.ToInt32(gridView1.GetFocusedRowCellValue("ID"));
            int _id = Convert.ToInt32(gridView2.GetFocusedRowCellValue("Id_bp"));
           
            BuyProcess buyprocess_ = new BuyProcess();
            BuyProcessProduct bpp = new BuyProcessProduct();

            if (!flag)
            {

                bpp =db.BuyProcessProducts.Where(x => x.Id_bp == _id).FirstOrDefault();

                quantity.Text = bpp.Total_quantity.ToString();
                pro_date.DateTime = bpp.ProductDate;
                exp_date.DateTime = bpp.ProductDate;


                ////////////////////////////////////////////
                buyprocess_ = db.BuyProcesses.Where(x => x.ID == iid).FirstOrDefault();
                rep_name.Text = buyprocess_.FullName;
                //if (comboBox1.IsHandleCreated && comboBox1.Focused)
                //{

                //    buypro_product.Id_p = Convert.ToInt32(comboBox1.SelectedIndex.ToString());
                    

                //}
                national_id.Text = buyprocess_.NationalID;
                op_date.DateTime = buyprocess_.DataProcess;
              
                tot_price.Text = buyprocess_.TotalPrice.ToString();

                btnEdit.Text = "حفظ التعديل";
                flag = true;


            }
            else if (flag)
            {
                messageDialog.Message = "هل انت متأكد من تعديل هذا المنتج!";

                if (messageDialog.ShowDialog() == DialogResult.Yes)
                {
                    //  comboBox1.SelectedIndex = buypro_product.Id_p;

                    bpp = db.BuyProcessProducts.Where(x => x.Id_bp == _id).FirstOrDefault();
                    bpp.ProductDate =pro_date.DateTime;
                    bpp.ExpireDate = exp_date.DateTime;
                    bpp.Total_quantity = Convert.ToInt32(quantity.Text);
                    buyprocess_ = db.BuyProcesses.Where(x => x.ID == iid).FirstOrDefault();
                    var q = db.Products.Where(p => p.ProductID == buypro_product.Id_p).FirstOrDefault();

                    buyprocess_.FullName = rep_name.Text;
                    buyprocess_.NationalID = national_id.Text;
                    buyprocess_.TotalPrice = decimal.Parse(tot_price.Text);
                    buyprocess_.DataProcess = Convert.ToDateTime(op_date.Text);

                    
                    try
                    {



                      
                        db.Entry(bpp).State = EntityState.Modified;
                        db.SaveChanges();
                        db.Entry(buyprocess_).State = EntityState.Modified;
                        db.SaveChanges();
                        MessageBox.Show("تم التعديل");
                    }
                    catch (OptimisticConcurrencyException)
                    {

                        MessageBox.Show("catcj");
                    }

                }
              
            }

        }




       


                      /*   CODE TO DELETE ITEMS  */
        private void btnDelete_Click(object sender, EventArgs e)
        {
            BuyProcess to_delete_item = new BuyProcess();
            // BuyProcessProduct buyProcess_product = new BuyProcessProduct();

            try
            {



                int My_id = Convert.ToInt32(gridView1.GetFocusedRowCellValue("ID"));
                var item = db.BuyProcesses.SingleOrDefault(x => x.ID == My_id);
                db.BuyProcesses.Remove(item);


                db.SaveChanges();
                MessageBox.Show("item deleted");


            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Not allowed");
            }


        }


        private void simpleButton1_Click_2(object sender, EventArgs e)
        {


          //  BuyProcess to_delete_item = new BuyProcess();
            BuyProcessProduct buyProcess_product = new BuyProcessProduct();





            try
            {


                //////////
            int second_id = Convert.ToInt32(gridView1.GetFocusedRowCellValue("ID"));


                var item = db.BuyProcessProducts.SingleOrDefault(x => x.Id_bp == second_id);
                //var item2 = db.BuyProcessProducts.SingleOrDefault(x => x.Id_p == second_id);



              
                db.BuyProcessProducts.Remove(item);
                //db.BuyProcessProducts.Remove(item2);


                db.SaveChanges();
                MessageBox.Show("item deleted");


            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Not allowed");
            }



        }

        private void gridControl1_Click(object sender, EventArgs e)
        {

        }

        private void simpleButton6_Click(object sender, EventArgs e)
        {
            DevExpress.XtraGrid.Views.Grid.GridView gv = show_supplier_data.MainView as DevExpress.XtraGrid.Views.Grid.GridView;
            


            if (gv != null)
            {
                gv.ExportToPdf("MainViewData.pdf");
                Process pdfExp = new Process();
                pdfExp.StartInfo.Arguments = "MainViewData.pdf";
                // pdfExp.StartInfo.FileName = "msedge.exe";
                pdfExp.StartInfo.FileName = "Acrobat.exe";
                pdfExp.Start();

            }
        }

       

        private void simpleButton7_Click(object sender, EventArgs e)
        {
            DevExpress.XtraGrid.Views.Grid.GridView we = gridControl_buy_process_pro.MainView as DevExpress.XtraGrid.Views.Grid.GridView;
            if (we != null)
            {
                we.ExportToPdf("mmm.pdf");
                Process pdfExp = new Process();
                pdfExp.StartInfo.Arguments = "MainViewData.pdf";
                // pdfExp.StartInfo.FileName = "msedge.exe";
                pdfExp.StartInfo.FileName = "Acrobat.exe";
                pdfExp.Start();

            }
        }

   
    }
}
